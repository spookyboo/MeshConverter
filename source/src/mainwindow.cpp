/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include <QString>
#include <QFile>
#include <QFileInfo>
#include <QMenuBar>
#include <QFileDialog>
#include <QVBoxLayout>
#include <QHeaderView>
#include <QMessageBox>
#include <QProcess>
#include <QActionGroup>
#include "mainwindow.h"


//****************************************************************************/
MainWindow::MainWindow(void) : mIsClosing(false)
{
    mOutputFolder = "";
    mPostfix = "";
    mParameters = MODERN_DESKTOP_WITH_NMAP_OPTIONS;
    mRunNumber = 1;

    // Perform standard functions
    createActions();
    createMenus();

    // Set the title
    setWindowTitle(QString("MeshConverter"));

    // Set the table
    mTable = new QTableWidget();
    mTable->setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
    mTable->setEditTriggers(QAbstractItemView::NoEditTriggers);
    mTable->setSelectionMode(QAbstractItemView::NoSelection);
    mTable->verticalHeader()->setVisible(false);
    mTable->setColumnCount(2);
    mTable->setColumnWidth(0, 704);
    mTable->setColumnWidth(1, 128);
    mTable->horizontalHeader()->setSectionResizeMode(0, QHeaderView::Stretch);
    doClearMenuAction();
    setCentralWidget(mTable);

    // Set the stylesheet of the application
    QFile File(QString("dark.qss"));
    File.open(QFile::ReadOnly);
    QString styleSheet = QLatin1String(File.readAll());
    setStyleSheet(styleSheet);
    setMinimumHeight(600);
    setMinimumWidth(800);
    show();
}

//****************************************************************************/
MainWindow::~MainWindow(void)
{

}

//****************************************************************************/
void MainWindow::closeEvent(QCloseEvent* event)
{
    mIsClosing = true;
}

//****************************************************************************/
void MainWindow::createActions(void)
{
    // File
    mImportMenuAction = new QAction(QString("Import"), this);
    connect(mImportMenuAction, SIGNAL(triggered()), this, SLOT(doImportMenuAction()));

    mSetOutputDirMenuAction = new QAction(QString("Set output directory"), this);
    connect(mSetOutputDirMenuAction, SIGNAL(triggered()), this, SLOT(doSetOutputDirMenuAction()));

    mConvertMenuAction = new QAction(QString("Convert"), this);
    connect(mConvertMenuAction, SIGNAL(triggered()), this, SLOT(doConvertMenuAction()));

    mClearMenuAction = new QAction(QString("Clear file list"), this);
    connect(mClearMenuAction, SIGNAL(triggered()), this, SLOT(doClearMenuAction()));

    mQuitMenuAction = new QAction(QString("Quit"), this);
    connect(mQuitMenuAction, SIGNAL(triggered()), this, SLOT(doQuitMenuAction()));

    // Options
    mPostFixMenuAction = new QAction(QString("Apply postfix " + POSTFIX), this);
    mPostFixMenuAction->setCheckable(true);
    connect(mPostFixMenuAction, SIGNAL(triggered()), this, SLOT(doPostFixMenuAction()));

    mOptionsModernDesktopWithNmapMenuAction = new QAction(QString("Modern desktop with normal mapping"), this);
    mOptionsModernDesktopWithNmapMenuAction->setCheckable(true);
    mOptionsModernDesktopWithNmapMenuAction->setChecked(true);
    connect(mOptionsModernDesktopWithNmapMenuAction, SIGNAL(triggered()), this, SLOT(doOptionsModernDesktopWithNmapMenuAction()));

    mOptionsModernDesktopWithoutNmapMenuAction = new QAction(QString("Modern desktop without normal mapping"), this);
    mOptionsModernDesktopWithoutNmapMenuAction->setCheckable(true);
    connect(mOptionsModernDesktopWithoutNmapMenuAction, SIGNAL(triggered()), this, SLOT(doOptionsModernDesktopWithoutNmapMenuAction()));

    mOptionsGles2WithNmapMenuAction = new QAction(QString("GLES2 with normal mapping"), this);
    mOptionsGles2WithNmapMenuAction->setCheckable(true);
    connect(mOptionsGles2WithNmapMenuAction, SIGNAL(triggered()), this, SLOT(doOptionsGles2WithNmapMenuAction()));

    mOptionsGles2WithoutNmapMenuAction = new QAction(QString("GLES2 without normal mapping"), this);
    mOptionsGles2WithoutNmapMenuAction->setCheckable(true);
    connect(mOptionsGles2WithoutNmapMenuAction, SIGNAL(triggered()), this, SLOT(doOptionsGles2WithoutNmapMenuAction()));
}

//****************************************************************************/
void MainWindow::createMenus(void)
{
    mFileMenu = menuBar()->addMenu(QString("File"));
    mOptionsMenu = menuBar()->addMenu(QString("Options"));

    // File
    mFileMenu->addAction(mImportMenuAction);
    mFileMenu->addAction(mSetOutputDirMenuAction);
    mFileMenu->addAction(mConvertMenuAction);
    mFileMenu->addAction(mClearMenuAction);
    mFileMenu->addAction(mQuitMenuAction);

    // Options
    mOptionsMenu->addAction(mPostFixMenuAction);
    QMenu* subMenu = mOptionsMenu->addMenu(QString("Conversion parameters"));
    QActionGroup actionGroup(subMenu);
    actionGroup.setExclusive(true);
    actionGroup.addAction(mOptionsModernDesktopWithNmapMenuAction);
    actionGroup.addAction(mOptionsModernDesktopWithoutNmapMenuAction);
    actionGroup.addAction(mOptionsGles2WithNmapMenuAction);
    actionGroup.addAction(mOptionsGles2WithoutNmapMenuAction);
    subMenu->addActions(actionGroup.actions());
}

//****************************************************************************/
void MainWindow::doImportMenuAction(void)
{
    QString fileName;
    QStringList fileNames;
    fileNames = QFileDialog::getOpenFileNames(this,
                                             QString("Select mesh file(s)"),
                                             QString(""),
                                             QString("Mesh (*.mesh)"));

    int row = mTable->rowCount();
    mTable->setRowCount(row + fileNames.size());
    QTableWidgetItem* item;
    foreach (fileName, fileNames)
    {
        item = new QTableWidgetItem(fileName);
        mTable->setItem(row, 0, item);
        mTable->setItem(row, 1, new QTableWidgetItem(QString("Not converted")));
        ++row;
    }
}

//****************************************************************************/
void MainWindow::doSetOutputDirMenuAction(void)
{
    QFileDialog dialog;
    dialog.setFileMode(QFileDialog::Directory);
    if (dialog.exec())
    {
        QStringList fileNames = dialog.selectedFiles();
        mOutputFolder = fileNames.at(0) + QString("/");
    }
}

//****************************************************************************/
void MainWindow::doConvertMenuAction(void)
{
    int row = 0;
    int maxRow = mTable->rowCount();
    QTableWidgetItem* item;
    QString fileName;
    QString run;
    while (row < maxRow)
    {
        item =  mTable->item(row, 0);
        fileName = item->text();
        QFileInfo file(fileName);
        run = QString ("OgreMeshTool") +
                mParameters +
                fileName +
                QString(" ") +
                mOutputFolder +
                file.baseName() +
                mPostfix +
                QString(".mesh");
        QProcess::execute(run);
        mTable->item(row, 1);
        mTable->setItem(row, 1, new QTableWidgetItem(QString("Executed_") + QVariant(mRunNumber).toString()));
        ++row;
    }
    ++mRunNumber;
}

//****************************************************************************/
void MainWindow::doClearMenuAction(void)
{
    mTable->clearContents();
    QStringList tableHeader;
    tableHeader << "Mesh file" << "Converted";
    mTable->setHorizontalHeaderLabels(tableHeader);
    mTable->setRowCount(0);
    mRunNumber = 1;
}

//****************************************************************************/
void MainWindow::doQuitMenuAction(void)
{
    close();
}

//****************************************************************************/
void MainWindow::doPostFixMenuAction(void)
{
    if (mPostFixMenuAction->isChecked())
        mPostfix = POSTFIX;
    else
        mPostfix = "";
}

//****************************************************************************/
void MainWindow::doOptionsModernDesktopWithNmapMenuAction(void)
{
    if (mOptionsModernDesktopWithNmapMenuAction->isChecked())
    {
        mParameters = MODERN_DESKTOP_WITH_NMAP_OPTIONS;
        mOptionsModernDesktopWithoutNmapMenuAction->setChecked(false);
        mOptionsGles2WithNmapMenuAction->setChecked(false);
        mOptionsGles2WithoutNmapMenuAction->setChecked(false);
    }
    else
    {
        mParameters = "";
    }
}

//****************************************************************************/
void MainWindow::doOptionsModernDesktopWithoutNmapMenuAction(void)
{
    if (mOptionsModernDesktopWithoutNmapMenuAction->isChecked())
    {
        mParameters = MODERN_DESKTOP_WITHOUT_NMAP_OPTIONS;
        mOptionsModernDesktopWithNmapMenuAction->setChecked(false);
        mOptionsGles2WithNmapMenuAction->setChecked(false);
        mOptionsGles2WithoutNmapMenuAction->setChecked(false);
    }
    else
    {
        mParameters = "";
    }
}

//****************************************************************************/
void MainWindow::doOptionsGles2WithNmapMenuAction(void)
{
    if (mOptionsGles2WithNmapMenuAction->isChecked())
    {
        mParameters = GLES2_WITH_NMAP_OPTIONS;
        mOptionsModernDesktopWithNmapMenuAction->setChecked(false);
        mOptionsModernDesktopWithoutNmapMenuAction->setChecked(false);
        mOptionsGles2WithoutNmapMenuAction->setChecked(false);
    }
    else
    {
        mParameters = "";
    }
}

//****************************************************************************/
void MainWindow::doOptionsGles2WithoutNmapMenuAction(void)
{
    if (mOptionsGles2WithoutNmapMenuAction->isChecked())
    {
        mParameters = GLES2_WITHOUT_NMAP_OPTIONS;
        mOptionsModernDesktopWithNmapMenuAction->setChecked(false);
        mOptionsModernDesktopWithoutNmapMenuAction->setChecked(false);
        mOptionsGles2WithNmapMenuAction->setChecked(false);
    }
    else
    {
        mParameters = "";
    }
}
